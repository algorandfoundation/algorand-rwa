import streamlit as st
import pandas as pd
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from utils.clickhouse_client import run_query
from queries.overview.queries import USDC_VOLUME, TRANSACTIONS, ACTIVE_WALLETS
from charts.overview.charts import create_transactions_chart, create_volume_chart, create_mau_chart

def format_large_number(num):
    """Format large numbers with K, M, B suffixes"""
    if num >= 1_000_000_000:
        return f"{num/1_000_000_000:.1f}B"
    elif num >= 1_000_000:
        return f"{num/1_000_000:.1f}M"
    elif num >= 1_000:
        return f"{num/1_000:.1f}K"
    else:
        return f"{num:.0f}"

@st.cache_data(ttl=3600)  # Auto-refresh cache every hour
def fetch_data(query):
    """Fetch data with automatic 1-hour refresh"""
    return run_query(query)

def render():
    # Calculate metrics
    rows, cols = fetch_data(USDC_VOLUME)
    vol_df = pd.DataFrame(rows, columns=cols)

    last30d_vol = vol_df.iloc[-1]['volume']
    vol_delta = last30d_vol/vol_df.iloc[-2]['volume'] - 1

    rows, cols = fetch_data(TRANSACTIONS)
    tx_df = pd.DataFrame(rows, columns=cols)
    last30d_tx = tx_df.iloc[-1]['transactions']
    tx_delta = last30d_tx/tx_df.iloc[-2]['transactions']

    rows, cols = fetch_data(ACTIVE_WALLETS)
    mau_df = pd.DataFrame(rows, columns=cols)
    mau = mau_df.iloc[-1]['unique_wallets']
    mau_delta = mau/mau_df.iloc[-2]['unique_wallets'] - 1


    # First row with 4 columns
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric(
            label=f"Monthly Transactions",
            value=f'{format_large_number(last30d_tx)}',
            delta=f"{tx_delta*100:,.2f}%",
            border=True
        )

    with col2:
        st.metric(
            label="Monthly Active Addresses",
            value=f"{format_large_number(mau)}",
            delta=f"{mau_delta*100:,.2f}%",
            border=True
        )

    with col3:
        st.metric(
            label="Monthly USDC Volume",
            value=f"${format_large_number(last30d_vol)}",
            delta=f"{vol_delta*100:.2f}%",
            border=True
        )
    
    st.divider()
    st.markdown("""
    <h3 style='text-align: center;'>Real World Assets on Algorand</h3>
    """, unsafe_allow_html=True)
    st.markdown("""
    Welcome to the Algorand RWA Dashboard. This platform tracks the adoption of **Real World Asset tokenization** on Algorand, 
    showcasing diverse applications from **real estate** and **commodities** to **stablecoins**, **private credit**, **certificates**, 
    **loyalty programs**, and **micropayments**. 

    Monitor unique wallet growth, transaction volumes, and ecosystem trends across multiple RWA categories. 
    Visit the **FAQ** section for in-depth information about each project and our methodology.
    """)
    st.divider()
    chart_options = {
        "overview_tx": "Monthly Transactions",
        "overview_mau": "Monthly Active Addresses",
        "overview_vol": "Monthly USDC Volume"
    }

    selection = st.pills(
        "Chart Type",
        options=chart_options.keys(),
        format_func=lambda option: chart_options[option],
        selection_mode="single",
        default="overview_tx",
        label_visibility="collapsed",
        key="pills_overview"  # Add this
    )

    # Add description based on selection
    chart_descriptions = {
        "overview_tx": "Monthly transactions generated by RWA dApps on Algorand.",
        "overview_mau": "Monthly active addresses on RWA dApps.",
        "overview_vol": "Monthly volume of USDC on Algorand."
    }

    if selection:
        st.info(chart_descriptions[selection])
    
    # Main content area
    try:
        # Fetch and prepare data
        with st.spinner("Loading data..."):
            # Market Cap Data
            tx_df['mt'] = pd.to_datetime(tx_df['mt'])
            tx_df = tx_df[tx_df['mt'] >= pd.Timestamp.now() - pd.DateOffset(years=1)]

            # Volume Data
            vol_df['mt'] = pd.to_datetime(vol_df['mt'])
            vol_df = vol_df[vol_df['mt'] >= pd.Timestamp.now() - pd.DateOffset(years=1)]

            mau_df['mt'] = pd.to_datetime(mau_df['mt'])
            mau_df = mau_df[mau_df['mt'] >= pd.Timestamp.now() - pd.DateOffset(years=1)]

        # Display selected chart
        if selection == "overview_tx":
            fig = create_transactions_chart(tx_df)
            st.plotly_chart(fig)
            
            # Optional: Show data table
            with st.expander("View Raw Data"):
                st.dataframe(tx_df, width='stretch')
        
        elif selection == "overview_mau":
            fig = create_mau_chart(mau_df)
            st.plotly_chart(fig)
            
            # Optional: Show data table
            with st.expander("View Raw Data"):
                st.dataframe(mau_df, width='stretch')
        
        elif selection == "overview_vol":
            fig = create_volume_chart(vol_df)
            st.plotly_chart(fig)
            
            # Optional: Show data table
            with st.expander("View Raw Data"):
                st.dataframe(vol_df)
        
        else:
            st.info("üëÜ Please select a chart type above to view the data.")

    except NameError:
        # If fetch_data is not defined, show a placeholder
        st.error("‚ö†Ô∏è Data fetching function not found. Please ensure `fetch_data` is imported.")
        st.info("This dashboard requires the following constants to be defined: `MARKET_CAP`, `VOLUME`, `ACTIVE_WALLETS`")
        
        # Show example of what the dashboard would look like
        st.markdown("---")
        st.subheader("Dashboard Preview")
        st.markdown("Once data is connected, you'll be able to:")
        st.markdown("- üìà View market cap trends")
        st.markdown("- üìä Compare trading volumes")
        st.markdown("- üë• Track active users")

    except Exception as e:
        st.error(f"An error occurred: {str(e)}")
        st.info("Please check your data sources and try again.")
    

